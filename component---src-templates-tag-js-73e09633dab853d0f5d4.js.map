{"version":3,"file":"component---src-templates-tag-js-73e09633dab853d0f5d4.js","mappings":"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","sources":["webpack://debrups_website/./src/templates/tag.js","webpack://debrups_website/./src/utils/helpers.js","webpack://debrups_website/./src/components/Post.js","webpack://debrups_website/./src/components/Posts.js","webpack://debrups_website/./src/components/SEO.js","webpack://debrups_website/./src/components/Hero.js"],"sourcesContent":["import React, { useMemo } from 'react'\nimport { graphql } from 'gatsby'\nimport Helmet from 'react-helmet'\n\nimport { Layout } from '../components/Layout'\nimport { SEO } from '../components/SEO'\nimport { Posts } from '../components/Posts'\nimport { Hero } from '../components/Hero'\nimport { PageLayout } from '../components/PageLayout'\nimport { getSimplifiedPosts } from '../utils/helpers'\nimport config from '../utils/config'\n\nexport default function TagTemplate({ data, pageContext }) {\n  let { tag } = pageContext\n  const { totalCount } = data.allMarkdownRemark\n  const posts = data.allMarkdownRemark.edges\n  const simplifiedPosts = useMemo(() => getSimplifiedPosts(posts), [posts])\n  const message = totalCount === 1 ? ' post tagged as:' : ' posts tagged as:'\n\n  return (\n    <>\n      <Helmet title={`${tag} | ${config.siteTitle}`} />\n      <SEO />\n\n      <PageLayout>\n        <Hero\n          highlight={totalCount}\n          subTitle={message}\n          title={tag}\n          type=\"taxonomy\"\n        />\n        <Posts data={simplifiedPosts} showYears />\n      </PageLayout>\n    </>\n  )\n}\n\nTagTemplate.Layout = Layout\n\nexport const pageQuery = graphql`\n  query TagPage($tag: String) {\n    allMarkdownRemark(\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            description\n            tags\n            category\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData(width: 40, height: 40, layout: FIXED)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n` ","export function getSimplifiedPosts(posts, options = {}) {\n  return posts.map((post) => ({\n    id: post.node.id,\n    date: post.node.frontmatter.date,\n    slug: post.node.fields.slug,\n    tags: post.node.frontmatter.tags,\n    categories: post.node.frontmatter.categories,\n    title: post.node.frontmatter.title,\n    description: post.node.frontmatter.description,\n    ...(options.thumbnails && {\n      thumbnail: post.node.frontmatter?.thumbnail?.childImageSharp?.gatsbyImageData,\n    }),\n  }));\n}\n\nexport function getTaxonomyFromPosts(posts, taxonomy) {\n  return posts\n    .reduce((acc, post) => {\n      return [...new Set([...acc, ...(post[taxonomy] || [])])]\n    }, [])\n    .sort()\n}\n\nexport function slugify(string) {\n  return (\n    string &&\n    `${string}`\n      .match(\n        /[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g\n      )\n      .map((x) => x.toLowerCase())\n      .join('-')\n  )\n}\n\nexport function capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\nexport function appendComments() {\n  const commentDiv = document.getElementById('append-comments-here')\n  const commentScript = document.createElement('script')\n  const theme = window.localStorage.getItem('theme')\n\n  commentScript.async = true\n  commentScript.src = 'https://utteranc.es/client.js'\n  commentScript.setAttribute('repo', 'taniarascia/comments')\n  commentScript.setAttribute('issue-term', 'pathname')\n  commentScript.setAttribute('id', 'utterances')\n  commentScript.setAttribute(\n    'theme',\n    theme === 'light' ? 'github-light' : 'github-dark'\n  )\n  commentScript.setAttribute('crossorigin', 'anonymous')\n\n  if (!commentDiv.firstChild) {\n    commentDiv.appendChild(commentScript)\n  } else {\n    console.error('Error adding utterances comments')\n  }\n}\n\nexport function getFormattedDate(date, option = 2) {\n  const dateArr = date.split(' ')\n  if (dateArr[1].startsWith('0')) {\n    dateArr[1] = dateArr[1].slice(1, 2)\n  } else {\n    dateArr[1] = dateArr[1].slice(0, 2)\n  }\n\n  if (option === 1) {\n    return dateArr[0] + ' ' + dateArr[option]\n  }\n\n  dateArr[1] += ','\n\n  return dateArr[0] + ' ' + dateArr[option]\n}\n\nexport function isNewPost(date) {\n  const postDate = new Date(date)\n  const today = new Date()\n  const diffTime = Math.abs(today - postDate)\n  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24))\n\n  if (diffDays < 50) return true\n}\n","import React, { useMemo } from 'react'\nimport { Link } from 'gatsby'\n\nimport { isNewPost, getFormattedDate } from '../utils/helpers'\n\nexport const Post = ({ node, prefix, newspaper, query }) => {\n  let formattedDate\n\n  if (node.date) {\n    if (!newspaper) {\n      formattedDate = getFormattedDate(node.date, 1)\n    } else {\n      formattedDate = getFormattedDate(node.date)\n    }\n  }\n\n  const newPost = useMemo(() => isNewPost(node.date), [node.date])\n\n  const getTitle = (title, query) => {\n    if (query) {\n      const re = new RegExp(query.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n      const highlightStart = title.search(re)\n\n      if (highlightStart !== -1) {\n        const highlightEnd = highlightStart + query.length\n\n        return (\n          <div>\n            {title.slice(0, highlightStart)}\n            <strong className=\"searched\">\n              {title.slice(highlightStart, highlightEnd)}\n            </strong>\n            {title.slice(highlightEnd)}\n          </div>\n        )\n      }\n      return <div>{title}</div>\n    }\n    return <div>{title}</div>\n  }\n\n  return (\n    <Link\n      to={prefix ? `/${prefix}${node.slug}` : node.slug}\n      key={node.id}\n      className=\"post\"\n    >\n      <div>\n        {newPost && <div className=\"button x-small\">✨ New</div>}{' '}\n        {getTitle(node.title, query)}\n      </div>\n      <time>{formattedDate}</time>\n    </Link>\n  )\n}\n","import React, { useMemo } from 'react'\n\nimport { Post } from './Post'\n\nexport const Posts = ({\n  data = [],\n  showYears,\n  query,\n  prefix,\n  hideDate,\n  yearOnly,\n  ...props\n}) => {\n  const postsByYear = useMemo(() => {\n    const collection = {}\n\n    data.forEach((post) => {\n      const year = post.date?.split(', ')[1]\n\n      collection[year] = [...(collection[year] || []), post]\n    })\n\n    return collection\n  }, [data])\n  const years = useMemo(() => Object.keys(postsByYear).reverse(), [postsByYear])\n\n  if (showYears) {\n    return years.map((year) => (\n      <section className=\"year\" key={year}>\n        <h2>{year}</h2>\n        <div className=\"posts\">\n          {postsByYear[year].map((node) => (\n            <Post key={node.id} node={node} query={query} prefix={prefix} />\n          ))}\n        </div>\n      </section>\n    ))\n  } else {\n    return (\n      <div className={props.newspaper ? 'posts newspaper' : 'posts'}>\n        {data.map((node) => (\n          <Post\n            key={node.id}\n            node={node}\n            query={query}\n            prefix={prefix}\n            hideDate={hideDate}\n            yearOnly={yearOnly}\n            {...props}\n          />\n        ))}\n      </div>\n    )\n  }\n}\n","import React from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport config from '../utils/config'\n\nexport const SEO = ({ postNode, postPath, postSEO, customDescription }) => {\n  let title\n  let description\n  let image = config.siteLogo\n  let postURL\n\n  if (postSEO) {\n    const postMeta = postNode.frontmatter\n    title = postMeta.title\n    description = postNode.excerpt\n\n    if (postMeta.thumbnail) {\n      image = postMeta.thumbnail.childImageSharp.gatsbyImageData.src\n    }\n\n    postURL = `${config.siteUrl}${postPath}`\n  } else {\n    title = config.siteTitle\n    description = customDescription || config.description\n  }\n\n  image = `${config.siteUrl}${image}`\n  const schemaOrgJSONLD = [\n    {\n      '@context': 'http://schema.org',\n      '@type': 'WebSite',\n      url: config.siteUrl,\n      name: title,\n      alternateName: title,\n    },\n  ]\n\n  if (postSEO) {\n    schemaOrgJSONLD.push(\n      {\n        '@context': 'http://schema.org',\n        '@type': 'BreadcrumbList',\n        itemListElement: [\n          {\n            '@type': 'ListItem',\n            position: 1,\n            item: {\n              '@id': postURL,\n              name: title,\n              image,\n            },\n          },\n        ],\n      },\n      {\n        '@context': 'http://schema.org',\n        '@type': 'BlogPosting',\n        url: config.siteUrl,\n        name: title,\n        alternateName: title,\n        headline: title,\n        image: {\n          '@type': 'ImageObject',\n          url: image,\n        },\n        description,\n      }\n    )\n  }\n\n  return (\n    <Helmet>\n      <meta name=\"description\" content={description} />\n      <meta name=\"image\" content={image} />\n\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaOrgJSONLD)}\n      </script>\n\n      <meta property=\"og:url\" content={postSEO ? postURL : config.siteUrl} />\n      {postSEO && <meta property=\"og:type\" content=\"article\" />}\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:image\" content={image} />\n\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={image} />\n    </Helmet>\n  )\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nexport const Hero = ({\n  highlight,\n  subTitle,\n  title,\n  description,\n  children,\n  type = 'page',\n  breadcrumb,\n  hasSearch,\n}) => {\n  return (\n    <header\n      className={`hero hero-${type}`}\n      style={hasSearch ? { marginBottom: '1.5rem' } : {}}\n    >\n      {subTitle && (\n        <div className=\"sub-title\">\n          {breadcrumb && (\n            <div>\n              <Link to={breadcrumb.value}>{breadcrumb.label}</Link> /\n            </div>\n          )}\n          <div>\n            {highlight && <span className=\"highlight\">{highlight}</span>}\n            <span>{subTitle}</span>\n          </div>\n        </div>\n      )}\n      {title && <h1>{title}</h1>}\n      {description && (\n        <div\n          className=\"hero-description\"\n          style={hasSearch ? { marginBottom: '0' } : {}}\n        >\n          {description}\n        </div>\n      )}\n\n      {children}\n    </header>\n  )\n}\n"],"names":["TagTemplate","_ref","data","pageContext","tag","totalCount","allMarkdownRemark","posts","edges","simplifiedPosts","useMemo","getSimplifiedPosts","message","React","Helmet","title","config","siteTitle","SEO","PageLayout","Hero","highlight","subTitle","type","Posts","showYears","Layout","options","map","post","_post$node$frontmatte","_post$node$frontmatte2","_post$node$frontmatte3","id","node","date","frontmatter","slug","fields","tags","categories","description","thumbnails","thumbnail","childImageSharp","gatsbyImageData","slugify","string","match","x","toLowerCase","join","getFormattedDate","option","dateArr","split","startsWith","slice","isNewPost","postDate","Date","today","diffTime","Math","abs","floor","Post","formattedDate","prefix","newspaper","query","newPost","Link","to","key","className","getTitle","re","RegExp","replace","highlightStart","search","highlightEnd","length","hideDate","yearOnly","props","postsByYear","collection","forEach","_post$date","year","concat","_toConsumableArray","years","Object","keys","reverse","assign","postURL","postNode","postPath","postSEO","customDescription","image","siteLogo","postMeta","excerpt","src","siteUrl","schemaOrgJSONLD","url","name","alternateName","push","itemListElement","position","item","headline","content","JSON","stringify","property","children","breadcrumb","hasSearch","style","marginBottom","value","label"],"sourceRoot":""}