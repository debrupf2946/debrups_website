{"version":3,"file":"component---src-templates-category-js-357c32da23f1f906421c.js","mappings":"sHAAO,SAASA,EAAmBC,EAAOC,GACxC,YAD+C,IAAPA,IAAAA,EAAU,CAAC,GAC5CD,EAAME,KAAKC,IAAI,IAAAC,EAAAC,EAAAC,EAAA,MAAM,CAC1BC,GAAIJ,EAAKK,KAAKD,GACdE,KAAMN,EAAKK,KAAKE,YAAYD,KAC5BE,KAAMR,EAAKK,KAAKI,OAAOD,KACvBE,KAAMV,EAAKK,KAAKE,YAAYG,KAC5BC,WAAYX,EAAKK,KAAKE,YAAYI,WAClCC,MAAOZ,EAAKK,KAAKE,YAAYK,MAC7BC,YAAab,EAAKK,KAAKE,YAAYM,eAC/Bf,EAAQgB,YAAc,CACxBC,UAAgC,QAAvBd,EAAED,EAAKK,KAAKE,mBAAW,IAAAN,GAAW,QAAXC,EAArBD,EAAuBc,iBAAS,IAAAb,GAAiB,QAAjBC,EAAhCD,EAAkCc,uBAAe,IAAAb,OAA5B,EAArBA,EAAmDc,iBAEjE,GACH,CAUO,SAASC,EAAQC,GACtB,OACEA,GACA,GAAGA,IACAC,MACC,sEAEDrB,KAAKsB,GAAMA,EAAEC,gBACbC,KAAK,IAEZ,CA6BO,SAASC,EAAiBlB,EAAMmB,QAAM,IAANA,IAAAA,EAAS,GAC9C,MAAMC,EAAUpB,EAAKqB,MAAM,KAO3B,OANID,EAAQ,GAAGE,WAAW,KACxBF,EAAQ,GAAKA,EAAQ,GAAGG,MAAM,EAAG,GAEjCH,EAAQ,GAAKA,EAAQ,GAAGG,MAAM,EAAG,GAGpB,IAAXJ,IAIJC,EAAQ,IAAM,KAHLA,EAAQ,GAAK,IAAMA,EAAQD,EAMtC,CAEO,SAASK,EAAUxB,GACxB,MAAMyB,EAAW,IAAIC,KAAK1B,GACpB2B,EAAQ,IAAID,KACZE,EAAWC,KAAKC,IAAIH,EAAQF,GAGlC,GAFiBI,KAAKE,MAAMH,EAAQ,OAErB,GAAI,OAAO,CAC5B,C,2MCjFO,MAAMI,EAAOC,IAAyC,IACvDC,GADe,KAAEnC,EAAI,OAAEoC,EAAM,UAAEC,EAAS,MAAEC,GAAOJ,EAGjDlC,EAAKC,OAILkC,EAHGE,GAGalB,EAAAA,EAAAA,IAAiBnB,EAAKC,OAFtBkB,EAAAA,EAAAA,IAAiBnB,EAAKC,KAAM,IAMhD,MAAMsC,GAAUC,EAAAA,EAAAA,UAAQ,KAAMf,EAAAA,EAAAA,IAAUzB,EAAKC,OAAO,CAACD,EAAKC,OAyB1D,OACEwC,EAAAA,cAACC,EAAAA,KAAI,CACHC,GAAIP,EAAS,IAAIA,IAASpC,EAAKG,OAASH,EAAKG,KAC7CyC,IAAK5C,EAAKD,GACV8C,UAAU,QAEVJ,EAAAA,cAAA,WACGF,GAAWE,EAAAA,cAAA,OAAKI,UAAU,kBAAiB,SAAa,IA9B9CC,EAACvC,EAAO+B,KACvB,GAAIA,EAAO,CACT,MAAMS,EAAK,IAAIC,OAAOV,EAAMW,QAAQ,sBAAuB,QAAS,KAC9DC,EAAiB3C,EAAM4C,OAAOJ,GAEpC,IAAwB,IAApBG,EAAuB,CACzB,MAAME,EAAeF,EAAiBZ,EAAMe,OAE5C,OACEZ,EAAAA,cAAA,WACGlC,EAAMiB,MAAM,EAAG0B,GAChBT,EAAAA,cAAA,UAAQI,UAAU,YACftC,EAAMiB,MAAM0B,EAAgBE,IAE9B7C,EAAMiB,MAAM4B,GAGnB,CACA,OAAOX,EAAAA,cAAA,WAAMlC,EACf,CACA,OAAOkC,EAAAA,cAAA,WAAMlC,EAAY,EAWpBuC,CAAS9C,EAAKO,MAAO+B,IAExBG,EAAAA,cAAA,YAAON,GACF,EChDEmB,EAAQpB,IAQd,IARe,KACpBqB,EAAO,GAAE,UACTC,EAAS,MACTlB,EAAK,OACLF,EAAM,SACNqB,EAAQ,SACRC,KACGC,GACJzB,EACC,MAAM0B,GAAcpB,EAAAA,EAAAA,UAAQ,KAC1B,MAAMqB,EAAa,CAAC,EAQpB,OANAN,EAAKO,SAASnE,IAAU,IAADoE,EACrB,MAAMC,EAAgB,QAAZD,EAAGpE,EAAKM,YAAI,IAAA8D,OAAA,EAATA,EAAWzC,MAAM,MAAM,GAEpCuC,EAAWG,GAAK,GAAAC,QAAAC,EAAAA,EAAAA,GAAQL,EAAWG,IAAS,IAAI,CAACrE,GAAK,IAGjDkE,CAAU,GAChB,CAACN,IACEY,GAAQ3B,EAAAA,EAAAA,UAAQ,IAAM4B,OAAOC,KAAKT,GAAaU,WAAW,CAACV,IAEjE,OAAIJ,EACKW,EAAMzE,KAAKsE,GAChBvB,EAAAA,cAAA,WAASI,UAAU,OAAOD,IAAKoB,GAC7BvB,EAAAA,cAAA,UAAKuB,GACLvB,EAAAA,cAAA,OAAKI,UAAU,SACZe,EAAYI,GAAMtE,KAAKM,GACtByC,EAAAA,cAACR,EAAI,CAACW,IAAK5C,EAAKD,GAAIC,KAAMA,EAAMsC,MAAOA,EAAOF,OAAQA,UAO5DK,EAAAA,cAAA,OAAKI,UAAWc,EAAMtB,UAAY,kBAAoB,SACnDkB,EAAK7D,KAAKM,GACTyC,EAAAA,cAACR,EAAImC,OAAAG,OAAA,CACH3B,IAAK5C,EAAKD,GACVC,KAAMA,EACNsC,MAAOA,EACPF,OAAQA,EACRqB,SAAUA,EACVC,SAAUA,GACNC,MAKd,C,kKCzCa,SAASa,EAAgBtC,GAAyB,IAAxB,KAAEqB,EAAI,YAAEkB,GAAavC,GACxD,SAAEwC,GAAaD,EACnB,MAAM,WAAEE,GAAepB,EAAKqB,kBACtBpF,EAAQ+D,EAAKqB,kBAAkBC,MAC/BC,GAAkBtC,EAAAA,EAAAA,UAAQ,KAAMjD,EAAAA,EAAAA,IAAmBC,IAAQ,CAACA,IAC5DuF,EACW,IAAfJ,EAAmB,wBAA0B,yBAE/C,OACElC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAACuC,EAAAA,EAAM,CAACzE,MAAO,GAAGmE,OAAcO,EAAAA,EAAOC,cACvCzC,EAAAA,cAAC0C,EAAAA,EAAG,MAEJ1C,EAAAA,cAAC2C,EAAAA,EAAU,KACT3C,EAAAA,cAAC4C,EAAAA,EAAI,CACHC,UAAWX,EACXY,SAAUR,EACVxE,MAAOmE,EACPc,KAAK,aAEP/C,EAAAA,cAACa,EAAAA,EAAK,CAACC,KAAMuB,EAAiBtB,WAAS,KAI/C,CAEAgB,EAAiBiB,OAASA,EAAAA,C,yFCjCnB,MAAMN,EAAMjD,IAAyD,IACtE3B,EACAC,EAEAkF,GAJc,SAAEC,EAAQ,SAAEC,EAAQ,QAAEC,EAAO,kBAAEC,GAAmB5D,EAGhE6D,EAAQd,EAAAA,EAAOe,SAGnB,GAAIH,EAAS,CACX,MAAMI,EAAWN,EAASzF,YAC1BK,EAAQ0F,EAAS1F,MACjBC,EAAcmF,EAASO,QAEnBD,EAASvF,YACXqF,EAAQE,EAASvF,UAAUC,gBAAgBC,gBAAgBuF,KAG7DT,EAAU,GAAGT,EAAAA,EAAOmB,UAAUR,GAChC,MACErF,EAAQ0E,EAAAA,EAAOC,UACf1E,EAAcsF,GAAqBb,EAAAA,EAAOzE,YAG5CuF,EAAQ,GAAGd,EAAAA,EAAOmB,UAAUL,IAC5B,MAAMM,EAAkB,CACtB,CACE,WAAY,oBACZ,QAAS,UACTC,IAAKrB,EAAAA,EAAOmB,QACZG,KAAMhG,EACNiG,cAAejG,IAqCnB,OAjCIsF,GACFQ,EAAgBI,KACd,CACE,WAAY,oBACZ,QAAS,iBACTC,gBAAiB,CACf,CACE,QAAS,WACTC,SAAU,EACVC,KAAM,CACJ,MAAOlB,EACPa,KAAMhG,EACNwF,YAKR,CACE,WAAY,oBACZ,QAAS,cACTO,IAAKrB,EAAAA,EAAOmB,QACZG,KAAMhG,EACNiG,cAAejG,EACfsG,SAAUtG,EACVwF,MAAO,CACL,QAAS,cACTO,IAAKP,GAEPvF,gBAMJiC,EAAAA,cAACuC,EAAAA,EAAM,KACLvC,EAAAA,cAAA,QAAM8D,KAAK,cAAcO,QAAStG,IAClCiC,EAAAA,cAAA,QAAM8D,KAAK,QAAQO,QAASf,IAE5BtD,EAAAA,cAAA,UAAQ+C,KAAK,uBACVuB,KAAKC,UAAUX,IAGlB5D,EAAAA,cAAA,QAAMwE,SAAS,SAASH,QAASjB,EAAUH,EAAUT,EAAAA,EAAOmB,UAC3DP,GAAWpD,EAAAA,cAAA,QAAMwE,SAAS,UAAUH,QAAQ,YAC7CrE,EAAAA,cAAA,QAAMwE,SAAS,WAAWH,QAASvG,IACnCkC,EAAAA,cAAA,QAAMwE,SAAS,iBAAiBH,QAAStG,IACzCiC,EAAAA,cAAA,QAAMwE,SAAS,WAAWH,QAASf,IAEnCtD,EAAAA,cAAA,QAAM8D,KAAK,eAAeO,QAAQ,YAClCrE,EAAAA,cAAA,QAAM8D,KAAK,gBAAgBO,QAASvG,IACpCkC,EAAAA,cAAA,QAAM8D,KAAK,sBAAsBO,QAAStG,IAC1CiC,EAAAA,cAAA,QAAM8D,KAAK,gBAAgBO,QAASf,IAC7B,C,+ECtFN,MAAMV,EAAOnD,IASb,IATc,UACnBoD,EAAS,SACTC,EAAQ,MACRhF,EAAK,YACLC,EAAW,SACX0G,EAAQ,KACR1B,EAAO,OAAM,WACb2B,EAAU,UACVC,GACDlF,EACC,OACEO,EAAAA,cAAA,UACEI,UAAW,aAAa2C,IACxB6B,MAAOD,EAAY,CAAEE,aAAc,UAAa,CAAC,GAEhD/B,GACC9C,EAAAA,cAAA,OAAKI,UAAU,aACZsE,GACC1E,EAAAA,cAAA,WACEA,EAAAA,cAACC,EAAAA,KAAI,CAACC,GAAIwE,EAAWI,OAAQJ,EAAWK,OAAa,MAGzD/E,EAAAA,cAAA,WACG6C,GAAa7C,EAAAA,cAAA,QAAMI,UAAU,aAAayC,GAC3C7C,EAAAA,cAAA,YAAO8C,KAIZhF,GAASkC,EAAAA,cAAA,UAAKlC,GACdC,GACCiC,EAAAA,cAAA,OACEI,UAAU,mBACVwE,MAAOD,EAAY,CAAEE,aAAc,KAAQ,CAAC,GAE3C9G,GAIJ0G,EACM,C","sources":["webpack://debrups_website/./src/utils/helpers.js","webpack://debrups_website/./src/components/Post.js","webpack://debrups_website/./src/components/Posts.js","webpack://debrups_website/./src/templates/category.js","webpack://debrups_website/./src/components/SEO.js","webpack://debrups_website/./src/components/Hero.js"],"sourcesContent":["export function getSimplifiedPosts(posts, options = {}) {\n  return posts.map((post) => ({\n    id: post.node.id,\n    date: post.node.frontmatter.date,\n    slug: post.node.fields.slug,\n    tags: post.node.frontmatter.tags,\n    categories: post.node.frontmatter.categories,\n    title: post.node.frontmatter.title,\n    description: post.node.frontmatter.description,\n    ...(options.thumbnails && {\n      thumbnail: post.node.frontmatter?.thumbnail?.childImageSharp?.gatsbyImageData,\n    }),\n  }));\n}\n\nexport function getTaxonomyFromPosts(posts, taxonomy) {\n  return posts\n    .reduce((acc, post) => {\n      return [...new Set([...acc, ...(post[taxonomy] || [])])]\n    }, [])\n    .sort()\n}\n\nexport function slugify(string) {\n  return (\n    string &&\n    `${string}`\n      .match(\n        /[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g\n      )\n      .map((x) => x.toLowerCase())\n      .join('-')\n  )\n}\n\nexport function capitalize(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\nexport function appendComments() {\n  const commentDiv = document.getElementById('append-comments-here')\n  const commentScript = document.createElement('script')\n  const theme = window.localStorage.getItem('theme')\n\n  commentScript.async = true\n  commentScript.src = 'https://utteranc.es/client.js'\n  commentScript.setAttribute('repo', 'taniarascia/comments')\n  commentScript.setAttribute('issue-term', 'pathname')\n  commentScript.setAttribute('id', 'utterances')\n  commentScript.setAttribute(\n    'theme',\n    theme === 'light' ? 'github-light' : 'github-dark'\n  )\n  commentScript.setAttribute('crossorigin', 'anonymous')\n\n  if (!commentDiv.firstChild) {\n    commentDiv.appendChild(commentScript)\n  } else {\n    console.error('Error adding utterances comments')\n  }\n}\n\nexport function getFormattedDate(date, option = 2) {\n  const dateArr = date.split(' ')\n  if (dateArr[1].startsWith('0')) {\n    dateArr[1] = dateArr[1].slice(1, 2)\n  } else {\n    dateArr[1] = dateArr[1].slice(0, 2)\n  }\n\n  if (option === 1) {\n    return dateArr[0] + ' ' + dateArr[option]\n  }\n\n  dateArr[1] += ','\n\n  return dateArr[0] + ' ' + dateArr[option]\n}\n\nexport function isNewPost(date) {\n  const postDate = new Date(date)\n  const today = new Date()\n  const diffTime = Math.abs(today - postDate)\n  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24))\n\n  if (diffDays < 50) return true\n}\n","import React, { useMemo } from 'react'\nimport { Link } from 'gatsby'\n\nimport { isNewPost, getFormattedDate } from '../utils/helpers'\n\nexport const Post = ({ node, prefix, newspaper, query }) => {\n  let formattedDate\n\n  if (node.date) {\n    if (!newspaper) {\n      formattedDate = getFormattedDate(node.date, 1)\n    } else {\n      formattedDate = getFormattedDate(node.date)\n    }\n  }\n\n  const newPost = useMemo(() => isNewPost(node.date), [node.date])\n\n  const getTitle = (title, query) => {\n    if (query) {\n      const re = new RegExp(query.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&'), 'i')\n      const highlightStart = title.search(re)\n\n      if (highlightStart !== -1) {\n        const highlightEnd = highlightStart + query.length\n\n        return (\n          <div>\n            {title.slice(0, highlightStart)}\n            <strong className=\"searched\">\n              {title.slice(highlightStart, highlightEnd)}\n            </strong>\n            {title.slice(highlightEnd)}\n          </div>\n        )\n      }\n      return <div>{title}</div>\n    }\n    return <div>{title}</div>\n  }\n\n  return (\n    <Link\n      to={prefix ? `/${prefix}${node.slug}` : node.slug}\n      key={node.id}\n      className=\"post\"\n    >\n      <div>\n        {newPost && <div className=\"button x-small\">âœ¨ New</div>}{' '}\n        {getTitle(node.title, query)}\n      </div>\n      <time>{formattedDate}</time>\n    </Link>\n  )\n}\n","import React, { useMemo } from 'react'\n\nimport { Post } from './Post'\n\nexport const Posts = ({\n  data = [],\n  showYears,\n  query,\n  prefix,\n  hideDate,\n  yearOnly,\n  ...props\n}) => {\n  const postsByYear = useMemo(() => {\n    const collection = {}\n\n    data.forEach((post) => {\n      const year = post.date?.split(', ')[1]\n\n      collection[year] = [...(collection[year] || []), post]\n    })\n\n    return collection\n  }, [data])\n  const years = useMemo(() => Object.keys(postsByYear).reverse(), [postsByYear])\n\n  if (showYears) {\n    return years.map((year) => (\n      <section className=\"year\" key={year}>\n        <h2>{year}</h2>\n        <div className=\"posts\">\n          {postsByYear[year].map((node) => (\n            <Post key={node.id} node={node} query={query} prefix={prefix} />\n          ))}\n        </div>\n      </section>\n    ))\n  } else {\n    return (\n      <div className={props.newspaper ? 'posts newspaper' : 'posts'}>\n        {data.map((node) => (\n          <Post\n            key={node.id}\n            node={node}\n            query={query}\n            prefix={prefix}\n            hideDate={hideDate}\n            yearOnly={yearOnly}\n            {...props}\n          />\n        ))}\n      </div>\n    )\n  }\n}\n","import React, { useMemo } from 'react'\nimport { graphql } from 'gatsby'\nimport Helmet from 'react-helmet'\n\nimport { Layout } from '../components/Layout'\nimport { SEO } from '../components/SEO'\nimport { Posts } from '../components/Posts'\nimport { Hero } from '../components/Hero'\nimport { PageLayout } from '../components/PageLayout'\nimport { getSimplifiedPosts } from '../utils/helpers'\nimport config from '../utils/config'\n\nexport default function CategoryTemplate({ data, pageContext }) {\n  let { category } = pageContext\n  const { totalCount } = data.allMarkdownRemark\n  const posts = data.allMarkdownRemark.edges\n  const simplifiedPosts = useMemo(() => getSimplifiedPosts(posts), [posts])\n  const message =\n    totalCount === 1 ? ' post categorized as:' : ' posts categorized as:'\n\n  return (\n    <>\n      <Helmet title={`${category} | ${config.siteTitle}`} />\n      <SEO />\n\n      <PageLayout>\n        <Hero\n          highlight={totalCount}\n          subTitle={message}\n          title={category}\n          type=\"taxonomy\"\n        />\n        <Posts data={simplifiedPosts} showYears />\n      </PageLayout>\n    </>\n  )\n}\n\nCategoryTemplate.Layout = Layout\n\nexport const pageQuery = graphql`\n  query CategoryPage($category: String) {\n    allMarkdownRemark(\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { category: { eq: $category } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            description\n            tags\n            category\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { Helmet } from 'react-helmet'\n\nimport config from '../utils/config'\n\nexport const SEO = ({ postNode, postPath, postSEO, customDescription }) => {\n  let title\n  let description\n  let image = config.siteLogo\n  let postURL\n\n  if (postSEO) {\n    const postMeta = postNode.frontmatter\n    title = postMeta.title\n    description = postNode.excerpt\n\n    if (postMeta.thumbnail) {\n      image = postMeta.thumbnail.childImageSharp.gatsbyImageData.src\n    }\n\n    postURL = `${config.siteUrl}${postPath}`\n  } else {\n    title = config.siteTitle\n    description = customDescription || config.description\n  }\n\n  image = `${config.siteUrl}${image}`\n  const schemaOrgJSONLD = [\n    {\n      '@context': 'http://schema.org',\n      '@type': 'WebSite',\n      url: config.siteUrl,\n      name: title,\n      alternateName: title,\n    },\n  ]\n\n  if (postSEO) {\n    schemaOrgJSONLD.push(\n      {\n        '@context': 'http://schema.org',\n        '@type': 'BreadcrumbList',\n        itemListElement: [\n          {\n            '@type': 'ListItem',\n            position: 1,\n            item: {\n              '@id': postURL,\n              name: title,\n              image,\n            },\n          },\n        ],\n      },\n      {\n        '@context': 'http://schema.org',\n        '@type': 'BlogPosting',\n        url: config.siteUrl,\n        name: title,\n        alternateName: title,\n        headline: title,\n        image: {\n          '@type': 'ImageObject',\n          url: image,\n        },\n        description,\n      }\n    )\n  }\n\n  return (\n    <Helmet>\n      <meta name=\"description\" content={description} />\n      <meta name=\"image\" content={image} />\n\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaOrgJSONLD)}\n      </script>\n\n      <meta property=\"og:url\" content={postSEO ? postURL : config.siteUrl} />\n      {postSEO && <meta property=\"og:type\" content=\"article\" />}\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:image\" content={image} />\n\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={image} />\n    </Helmet>\n  )\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nexport const Hero = ({\n  highlight,\n  subTitle,\n  title,\n  description,\n  children,\n  type = 'page',\n  breadcrumb,\n  hasSearch,\n}) => {\n  return (\n    <header\n      className={`hero hero-${type}`}\n      style={hasSearch ? { marginBottom: '1.5rem' } : {}}\n    >\n      {subTitle && (\n        <div className=\"sub-title\">\n          {breadcrumb && (\n            <div>\n              <Link to={breadcrumb.value}>{breadcrumb.label}</Link> /\n            </div>\n          )}\n          <div>\n            {highlight && <span className=\"highlight\">{highlight}</span>}\n            <span>{subTitle}</span>\n          </div>\n        </div>\n      )}\n      {title && <h1>{title}</h1>}\n      {description && (\n        <div\n          className=\"hero-description\"\n          style={hasSearch ? { marginBottom: '0' } : {}}\n        >\n          {description}\n        </div>\n      )}\n\n      {children}\n    </header>\n  )\n}\n"],"names":["getSimplifiedPosts","posts","options","map","post","_post$node$frontmatte","_post$node$frontmatte2","_post$node$frontmatte3","id","node","date","frontmatter","slug","fields","tags","categories","title","description","thumbnails","thumbnail","childImageSharp","gatsbyImageData","slugify","string","match","x","toLowerCase","join","getFormattedDate","option","dateArr","split","startsWith","slice","isNewPost","postDate","Date","today","diffTime","Math","abs","floor","Post","_ref","formattedDate","prefix","newspaper","query","newPost","useMemo","React","Link","to","key","className","getTitle","re","RegExp","replace","highlightStart","search","highlightEnd","length","Posts","data","showYears","hideDate","yearOnly","props","postsByYear","collection","forEach","_post$date","year","concat","_toConsumableArray","years","Object","keys","reverse","assign","CategoryTemplate","pageContext","category","totalCount","allMarkdownRemark","edges","simplifiedPosts","message","Helmet","config","siteTitle","SEO","PageLayout","Hero","highlight","subTitle","type","Layout","postURL","postNode","postPath","postSEO","customDescription","image","siteLogo","postMeta","excerpt","src","siteUrl","schemaOrgJSONLD","url","name","alternateName","push","itemListElement","position","item","headline","content","JSON","stringify","property","children","breadcrumb","hasSearch","style","marginBottom","value","label"],"sourceRoot":""}